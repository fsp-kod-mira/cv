// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package postgresql

import (
	"database/sql/driver"
	"fmt"
)

type Statuses string

const (
	StatusesWaiting Statuses = "waiting"
	StatusesOk      Statuses = "ok"
)

func (e *Statuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Statuses(s)
	case string:
		*e = Statuses(s)
	default:
		return fmt.Errorf("unsupported scan type for Statuses: %T", src)
	}
	return nil
}

type NullStatuses struct {
	Statuses Statuses `json:"statuses"`
	Valid    bool     `json:"valid"` // Valid is true if Statuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.Statuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Statuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Statuses), nil
}

type Cv struct {
	ID           string   `json:"id"`
	UploadedByID string   `json:"uploaded_by_id"`
	FileID       string   `json:"file_id"`
	Status       Statuses `json:"status"`
}

type CvsFeature struct {
	CvID      string `json:"cv_id"`
	FeatureID int32  `json:"feature_id"`
	Value     string `json:"value"`
}
