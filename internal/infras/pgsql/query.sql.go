// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package postgresql

import (
	"context"
)

const createCv = `-- name: CreateCv :exec
insert into cvs(id, uploaded_by_id, file_id) values($1, $2, $3)
`

type CreateCvParams struct {
	ID           string `json:"id"`
	UploadedByID string `json:"uploaded_by_id"`
	FileID       string `json:"file_id"`
}

func (q *Queries) CreateCv(ctx context.Context, arg CreateCvParams) error {
	_, err := q.db.ExecContext(ctx, createCv, arg.ID, arg.UploadedByID, arg.FileID)
	return err
}

const getAllCvs = `-- name: GetAllCvs :many
select id, uploaded_by_id, file_id, status
from cvs
limit $1
offset $2
`

type GetAllCvsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllCvs(ctx context.Context, arg GetAllCvsParams) ([]Cv, error) {
	rows, err := q.db.QueryContext(ctx, getAllCvs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cv
	for rows.Next() {
		var i Cv
		if err := rows.Scan(
			&i.ID,
			&i.UploadedByID,
			&i.FileID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCv = `-- name: GetCv :one
select id, uploaded_by_id, file_id, status
from cvs
where id = $1
limit 1
`

func (q *Queries) GetCv(ctx context.Context, id string) (Cv, error) {
	row := q.db.QueryRowContext(ctx, getCv, id)
	var i Cv
	err := row.Scan(
		&i.ID,
		&i.UploadedByID,
		&i.FileID,
		&i.Status,
	)
	return i, err
}

const getFeaturesByCvs = `-- name: GetFeaturesByCvs :many
select cv_id, feature_id, value
from cvs_features f
where f.cv_id = $1
`

func (q *Queries) GetFeaturesByCvs(ctx context.Context, cvID string) ([]CvsFeature, error) {
	rows, err := q.db.QueryContext(ctx, getFeaturesByCvs, cvID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CvsFeature
	for rows.Next() {
		var i CvsFeature
		if err := rows.Scan(&i.CvID, &i.FeatureID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
